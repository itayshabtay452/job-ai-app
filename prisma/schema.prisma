// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  image     String?        // ← חדש
  emailVerified DateTime?  // ← חדש
  createdAt DateTime @default(now())

  resumes   Resume[]
  matches   Match[]
  drafts    ApplicationDraft[]

  accounts  Account[]
  sessions  Session[]
}


model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@id([identifier, token])
}


model Resume {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique   // ← ייחודי כדי לאפשר upsert לפי userId
  text      String
  skills    Json
  yearsExp  Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt   // ← נוח למעקב
}


model Job {
  id             String   @id @default(cuid())
  source         String
  title          String
  company        String
  location       String?
  description    String
  skillsRequired Json
  url            String?
  createdAt      DateTime @default(now())

  matches        Match[]
  drafts         ApplicationDraft[]
}

model Match {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  job       Job      @relation(fields: [jobId], references: [id])
  jobId     String
  score     Float
  reasons   Json
  createdAt DateTime @default(now())
}

model ApplicationDraft {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  job         Job      @relation(fields: [jobId], references: [id])
  jobId       String
  coverLetter String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
